import Head from "next/head";
import axios from "axios";
import KeyValueCard from "../../components/common/KeyValueCard";
import DonutChart from "../../components/charts/DonutChart";
import BarChart from "../../components/charts/BarChart";
import LineChart from "../../components/charts/LineChart";
import InformationTable from "../../components/tables/InformationTable";
import styles from "../../styles/pages/user/User.module.css";

const User = ({ information, contests, problems }) => {
  // Extract the information necessary for the contests information table
  const getContestInformation = (contests) => {
    // Rename all keys to be more readable and order them
    const contestInformation = Object.fromEntries([
      ["Total Number of Contests", contests["total_number_participated"]],
      ["Best Rank", contests["best_rank"]],
      ["Worst Rank", contests["worst_rank"]],
      ["Highest Rating Change", contests["highest_rating_change"]],
      ["Lowest Rating Change", contests["lowest_rating_change"]],
    ]);

    return contestInformation;
  };

  // Extract the information necessary for the verdict distribution donut chart
  const getVerdictDistribution = (problems) => {
    const { ["solved_count"]: _, ...verdictDistribution } = problems;
    return verdictDistribution;
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>{information["handle"]}'s Statistics</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.stats_container}>
        {/* Heading */}
        <div className={styles.heading_container}>
          <h1 className={styles.heading_prefix}>statistics for</h1>
          <h1 className={styles.heading_name}>{information["handle"]}</h1>
        </div>

        {/* User Information Cards */}
        <div className={styles.user_information_container}>
          <KeyValueCard
            cardKey={"User Since"}
            cardValue={information["creation_date"]
              .split(" ")
              .slice(1, 4)
              .join(" ")}
          />
          <KeyValueCard cardKey={"Rank"} cardValue={information["rank"]} />
          <KeyValueCard cardKey={"Rating"} cardValue={information["rating"]} />
          <KeyValueCard
            cardKey={"Maximum Rating"}
            cardValue={information["max_rating"]}
          />
        </div>

        <div className={styles.problems_stats_container}>
          {/* Verdict Distribution Donut Chart */}
          <div className={styles.half_chart_container}>
            <DonutChart
              title={`Submission Verdicts for ${information["handle"]}`}
              data={getVerdictDistribution(problems["submission_statistics"])}
            />
          </div>
          {/* Tag Distribution Donut Chart */}
          <div className={styles.half_chart_container}>
            <DonutChart
              title={`Problem Tags Solved by ${information["handle"]}`}
              data={problems["tags"]}
            />
          </div>
          {/* Index Distribution Bar Chart */}
          <div className={styles.half_chart_container}>
            <BarChart
              title={`Problem Indexes Solved by ${information["handle"]}`}
              data={problems["indexes"]}
              color={"#ff1744"}
            />
          </div>
          {/* Ratings Distribution Bar Chart */}
          <div className={styles.half_chart_container}>
            <BarChart
              title={`Problem Ratings Solved by ${information["handle"]}`}
              data={problems["ratings"]}
              color={"#2196f3"}
            />
          </div>
          {/* Rating History Line Chart */}
          <div className={styles.full_chart_container}>
            <LineChart
              title={`Rating History for ${information["handle"]}`}
              data={contests["rating_history"]}
            />
          </div>
          <div className={styles.half_chart_container}>
            <InformationTable
              title={`Contests Given by ${information["handle"]}`}
              data={getContestInformation(contests)}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export const getStaticProps = async (context) => {
  // Extracting handle from URL
  const handle = context.params.handle;

  // The base URL is common to information ("/"), user's contests ("/contests-participated")
  // and user's problems solved ("/problems-solved")
  const baseURL = `http://localhost:5000/users/${handle}`;

  // Getting the required statistics from the backend
  const information = await axios.get(baseURL);
  const contests = await axios.get(`${baseURL}/contests-participated`);
  const problems = await axios.get(`${baseURL}/problems-solved`);

  // Passing in the statistics as props to the page component
  return {
    props: {
      information: await information.data,
      contests: await contests.data,
      problems: await problems.data,
    },
    // If any request is made 5 minutes after the last one, the page will be regenerated.
    // Only the requested page is regenerated, not the whole application.
    revalidate: 300,
  };
};

export const getStaticPaths = async () => {
  // Getting information of all users from the database. We need this to
  // pregenerate the pages on build time.
  const URL = "http://localhost:5000/users";
  const users = await axios.get(URL);
  const usersData = await users.data;

  // Obtaining essentially an array of user handles to build the pages for each user.
  // This is run once at build time and so subsequent requests will serve static
  // pages, resulting in much lower load times.
  const paths = usersData.map((user) => ({
    params: { handle: user["handle"] },
  }));

  // If the path still doesn't exist after the static build, the page will be
  // server-rendered on-demand, if fallback is set to "blocking", instead of
  // displaying a 404. This is just a fallback in case of any mismatches between
  // backend database updates and the frontend static build.
  return {
    paths: paths,
    fallback: "blocking",
  };
};

export default User;
