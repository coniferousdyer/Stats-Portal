import Head from "next/head";
import { useState, useEffect } from "react";
import axios from "axios";
import KeyValueCard from "../components/common/KeyValueCard";
import InformationTable from "../components/tables/InformationTable";
import DonutChart from "../components/charts/DonutChart";
import VerticalBarChart from "../components/charts/VerticalBarChart";
import HorizontalBarChart from "../components/charts/HorizontalBarChart";
import styles from "../styles/Home.module.css";
import {
  formatContestsDataForTable,
  formatProblemsDataForTable,
  obtainOverallContestsStatistics,
  obtainOverallProblemsStatistics,
} from "../helpers/organization";

export default function Home({ overallContests, overallProblems }) {
  // The time period for which the user wants to view the statistics
  const [timePeriod, setTimePeriod] = useState("all_time");

  useEffect(() => {
    console.log(overallProblems);
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Stats Portal</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.stats_container}>
        {/* Heading */}
        <div className={styles.heading_container}>
          <h1 className={styles.heading_prefix}>statistics for</h1>
          <h1 className={styles.heading_name}>{"IIIT Hyderabad"}</h1>{" "}
        </div>

        {/* Organization Information Cards TODO: To be changed */}
        <div className={styles.user_information_container}>
          <KeyValueCard cardKey={"Organization ID"} cardValue={227} />
          <KeyValueCard cardKey={"Global Rank"} cardValue={1234} />
          <KeyValueCard cardKey={"Rating"} cardValue={5678} />
          <KeyValueCard cardKey={"Users"} cardValue={969} />
        </div>

        <div className={styles.problems_stats_container}>
          {/* Problems Solved Leaderboard Bar Chart */}
          <div className={styles.one_third_chart_container}>
            <HorizontalBarChart
              title={`Most Problems Solved in ${"IIIT Hyderabad"}`}
              data={overallProblems[timePeriod].most_problems_solved}
              color={"#2196f3"}
              dataName={"Problems Solved"}
            />
          </div>
          {/* Contests Given Leaderboard Table */}
          <div className={styles.one_third_chart_container}>
            <HorizontalBarChart
              title={`Most Contests Given in ${"IIIT Hyderabad"}`}
              data={overallContests[timePeriod].most_contests_participated}
              color={"#32cd32"}
              dataName={"Contests Participated"}
            />
          </div>
          {/* Highest Rank Leaderboard Table */}
          <div className={styles.one_third_chart_container}>
            <HorizontalBarChart
              title={`Best Contest Ranks in ${"IIIT Hyderabad"}`}
              data={overallContests[timePeriod].best_contest_ranks}
              color={"#dc143c"}
              dataName={"Highest Rank"}
            />
          </div>
          {/* Contests Statistics Table */}
          <div className={styles.half_chart_container}>
            <InformationTable
              title={"Contest Statistics"}
              data={formatContestsDataForTable(overallContests[timePeriod])}
            />
          </div>
          {/* Problems Statistics Table */}
          <div className={styles.half_chart_container}>
            <InformationTable
              title={"Problem Statistics"}
              data={formatProblemsDataForTable(overallProblems[timePeriod])}
            />
          </div>
          {/* Language Distribution Chart */}
          <div className={styles.half_chart_container}>
            <DonutChart
              title={`Languages Used by ${"IIIT Hyderabad"}`}
              data={overallProblems[timePeriod].languages}
            />
          </div>
          {/* Tag Distribution Donut Chart */}
          <div className={styles.half_chart_container}>
            <DonutChart
              title={`Problem Tags Solved by ${"IIIT Hyderabad"}`}
              data={overallProblems[timePeriod].tags}
            />
          </div>
          {/* Index Distribution Bar Chart */}
          <div className={styles.half_chart_container}>
            <VerticalBarChart
              title={`Problem Indexes Solved by ${"IIIT Hyderabad"}`}
              data={overallProblems[timePeriod].indexes}
              color={"#ff1744"}
              dataName={"Problems Solved"}
            />
          </div>
          {/* Ratings Distribution Bar Chart */}
          <div className={styles.half_chart_container}>
            <VerticalBarChart
              title={`Problem Ratings Solved by ${"IIIT Hyderabad"}`}
              data={overallProblems[timePeriod].ratings}
              color={"#2196f3"}
              dataName={"Problems Solved"}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

export const getStaticProps = async () => {
  // Obtain the data about contests and problems solved by each user from the backend
  const userContests = await axios.get(
    "http://localhost:5000/users/contests-participated"
  );
  const userProblems = await axios.get(
    "http://localhost:5000/users/problems-solved"
  );

  // Retrieve the data from the response
  const userContestsData = await userContests.data;
  const userProblemsData = await userProblems.data;

  // Aggregate the data about contests and problems solved by each user into
  // one object containing the overall statistics of the organization
  const overallContestsStatistics = await obtainOverallContestsStatistics(
    userContestsData
  );
  const overallProblemsStatistics = await obtainOverallProblemsStatistics(
    userProblemsData
  );

  // Passing in the statistics to the page component
  return {
    props: {
      overallContests: overallContestsStatistics,
      overallProblems: overallProblemsStatistics,
    },
    // If a request is made an hour after the page was last generated, the page
    // is regenerated. As the data in the backend remains static for some time,
    // this is not an issue.
    revalidate: 3600,
  };
};
