import Head from "next/head";
import axios from "axios";
import UserInformationTable from "../../components/tables/UserInformationTable";
import styles from "../../styles/visualizer/UserVisualizer.module.css";

const UserVisualizer = ({ information, contests, problems }) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>{information["handle"]}'s Statistics</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.stats_container}>
        {/* Heading */}
        <h1 className={styles.heading_prefix}>statistics for</h1>
        <h1 className={styles.heading_name}>{information["handle"]}</h1>

        {/* Information table */}
        <div className={styles.information_table_container}>
          <UserInformationTable
            primaryUser={information}
            secondaryUser={null}
          />
        </div>
      </div>
    </div>
  );
};

export const getStaticProps = async (context) => {
  // Extracting handle from URL
  const handle = context.params.handle;

  // The base URL is common to information ("/"), user's contests ("/contests-participated")
  // and user's problems solved ("/problems-solved")
  const baseURL = `http://localhost:5000/users/${handle}`;

  // Getting the required statistics from the backend
  const information = await axios.get(baseURL);
  const contests = await axios.get(`${baseURL}/contests-participated`);
  const problems = await axios.get(`${baseURL}/problems-solved`);

  // Passing in the statistics as props to the page component
  return {
    props: {
      information: await information.data,
      contests: await contests.data,
      problems: await problems.data,
    },
    // If any request is made 5 minutes after the last one, the page will be regenerated.
    // Only the requested page is regenerated, not the whole application.
    revalidate: 300,
  };
};

export const getStaticPaths = async () => {
  // Getting information of all users from the database. We need this to
  // pregenerate the pages on build time.
  const URL = "http://localhost:5000/users";
  const users = await axios.get(URL);
  const usersData = await users.data;

  // Obtaining essentially an array of user handles to build the pages for each user.
  // This is run once at build time and so subsequent requests will serve static
  // pages, resulting in much lower load times.
  const paths = usersData.map((user) => ({
    params: { handle: user["handle"] },
  }));

  // If the path still doesn't exist after the static build, the page will be
  // server-rendered on-demand, if fallback is set to "blocking", instead of
  // displaying a 404. This is just a fallback in case of any mismatches between
  // backend database updates and the frontend static build.
  return {
    paths: paths,
    fallback: "blocking",
  };
};

export default UserVisualizer;
